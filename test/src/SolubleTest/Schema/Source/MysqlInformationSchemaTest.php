<?php

namespace SolubleTest\Schema\Source;

use Soluble\Schema\Source\MysqlInformationSchema;
use Soluble\DbWrapper\Adapter\AdapterInterface;
use Soluble\DbWrapper\AdapterFactory;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-04 at 16:46:00.
 */
class MysqlInformationSchemaTest extends \PHPUnit_Framework_TestCase
{
    /**
     *
     * @var \PDO
     */
    protected $conn;

    /**
     *
     * @var AdapterInterface
     */
    protected $adapter;

    /**
     * @var MysqlInformationSchema
     */
    protected $metadata;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->conn = \SolubleTestFactories::getDbConnection('mysqli');
        $this->adapter = AdapterFactory::createAdapterFromResource($this->conn);
        $this->metadata = new MysqlInformationSchema($this->conn);
    }


    public function testGetSchemaConfigThrowsSchemaNotFoundException()
    {
        $this->setExpectedException('Soluble\Schema\Exception\SchemaNotFoundException');
        $metadata = new MysqlInformationSchema($this->conn, $schema = "fdgdfgdfgppooaze");

        $metadata->getSchemaConfig();

    }


    public function testConstructThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Schema\Exception\InvalidArgumentException');

        $metadata = new MysqlInformationSchema($this->conn, array('schema_not_valid'));
    }

    public function testConstructThrowsInvalidArgumentException2()
    {
        $this->setExpectedException('Soluble\Schema\Exception\InvalidArgumentException');
        $metadata = new MysqlInformationSchema($this->conn, $schema = "   ");
    }




    public function testGetSchemaConfig()
    {
        $schema = $this->metadata->getSchemaConfig();
        $this->assertInstanceOf('ArrayObject', $schema);
        $this->assertInternalType('array', $schema['tables']);
        $this->assertTrue(array_key_exists('product', $schema['tables']));
    }

    public function testGetTableConfigThrowsTableNotFoundException()
    {
        $method = new \ReflectionMethod('\Soluble\Schema\Source\MysqlInformationSchema', 'getTableConfig');
        $method->setAccessible(true);

        $this->setExpectedException('Soluble\Schema\Exception\TableNotFoundException');
        $method->invokeArgs($this->metadata, array('table_unexistent_999'));

    }

    public function testGetTableConfig()
    {
        $table = "product_brand";

        $method = new \ReflectionMethod('\Soluble\Schema\Source\MysqlInformationSchema', 'getTableConfig');
        $method->setAccessible(true);
        $config = $method->invokeArgs($this->metadata, array($table));

        $this->assertInternalType('array', $config);
        $this->assertEquals('product_brand', $config['name']);

        $this->assertEquals('reference', $config['unique_keys']['unique_reference_idx'][0]);
        $this->assertEquals('brand_id', $config['primary_keys'][0]);
        $this->assertEquals(false, $config['columns']['created_by']['primary']);
        $this->assertEquals(true, $config['columns']['brand_id']['primary']);
    }
    public function testGetForeignKeys()
    {
        $relations = $this->metadata->getForeignKeys('product');
        $this->assertInternalType('array', $relations);
        $this->assertArrayHasKey('brand_id', $relations);
        $this->assertArrayHasKey('referenced_column', $relations['unit_id']);
        $this->assertArrayHasKey('referenced_table', $relations['unit_id']);
        $this->assertArrayHasKey('constraint_name', $relations['unit_id']);
        $foreign_tables = array_keys($relations);
        $this->assertEquals(array('brand_id', 'group_id','category_id','type_id','unit_id'), $foreign_tables);
        $this->assertEquals(5, count($foreign_tables));
    }


    public function testGetReferences()
    {
        $references = $this->metadata->getReferences('product');
        $this->assertInternalType('array', $references);

        $media_ref = $references["product_media:product_id->product_id"];
        $this->assertEquals("product_id", $media_ref['column']);
        $this->assertEquals("product_media", $media_ref['referencing_table']);
        $this->assertEquals("product_id", $media_ref['referencing_column']);
    }


    public function testGetTablesInformation()
    {
        $ti = $this->metadata->getTablesInformation();
        $table = 'media';
        $this->assertInternalType('array', $ti);
        $this->assertArrayHasKey($table, $ti);
        $this->assertArrayHasKey('columns', $ti[$table]);
        $this->assertArrayHasKey('indexes', $ti[$table]);
        $this->assertArrayHasKey('primary_keys', $ti[$table]);
        $this->assertArrayHasKey('unique_keys', $ti[$table]);
    }

    public function testGetUniqueKeys()
    {
        $unique = $this->metadata->getUniqueKeys('test_table_with_unique_key');
        $this->assertInternalType('array', $unique);
        $this->assertEquals(1, count($unique));
        $this->assertArrayHasKey('unique_id_1', $unique);
        $this->assertInternalType('array', $unique['unique_id_1']);
        $this->assertEquals(2, count($unique['unique_id_1']));
        $this->assertEquals(array('unique_id_1', 'unique_id_2'), $unique['unique_id_1']);


        $unique = $this->metadata->getUniqueKeys('product');
        $this->assertInternalType('array', $unique);
        $this->assertEquals(3, count($unique));
        $this->assertArrayHasKey('unique_legacy_mapping_idx', $unique);
        $this->assertArrayHasKey('unique_reference_idx', $unique);
        $this->assertArrayHasKey('unique_slug_idx', $unique);


        $unique = $this->metadata->getUniqueKeys('product', $include_pk = true);
        $this->assertInternalType('array', $unique);
        $this->assertEquals(4, count($unique));
        $this->assertArrayHasKey('PRIMARY', $unique);
        $this->assertArrayHasKey('unique_legacy_mapping_idx', $unique);
        $this->assertArrayHasKey('unique_reference_idx', $unique);
        $this->assertArrayHasKey('unique_slug_idx', $unique);

        $unique = $this->metadata->getUniqueKeys('test_table_without_pk');
        $this->assertInternalType('array', $unique);
        $this->assertEquals(0, count($unique));

        // No unqiue contraints, no primary key
        $unique = $this->metadata->getUniqueKeys('test_table_without_pk', $include_pk = true);
        $this->assertInternalType('array', $unique);
        $this->assertEquals(0, count($unique));
    }


    public function testGetPrimaryKey()
    {
        $primary = $this->metadata->getPrimaryKey('user');
        $this->assertInternalType('string', $primary);
        $this->assertEquals('user_id', $primary);
    }



    public function testGetPrimaryKeyThrowsTableNotFoundException()
    {
        $this->setExpectedException('Soluble\Schema\Exception\TableNotFoundException');
        $primary = $this->metadata->getPrimaryKey('table_not_found_899');
    }

    public function testGetPrimaryKeyThrowsMultiplePrimaryKeyException()
    {
        $this->setExpectedException('Soluble\Schema\Exception\MultiplePrimaryKeyException');
        $primary = $this->metadata->getPrimaryKey('test_table_with_multipk');
    }

    public function testGetColumns()
    {
        $columns = $this->metadata->getColumns('user');
        $this->assertEquals('user_id', $columns[0]);
        $this->assertEquals('password', $columns[4]);
    }

    public function testGetColumnsInformation()
    {
        $infos = $this->metadata->getColumnsInformation('user');

        $columns = array_keys($infos);
        $this->assertEquals('user_id', $columns[0]);
        $this->assertEquals('password', $columns[4]);

        $this->assertEquals('int', $infos['user_id']['type']);
    }


    public function testGetTableInformation()
    {
        $info = $this->metadata->getTableInformation('user');
        $this->assertEquals('user', $info['name']);
        $this->assertEquals('user_id', $info['primary_keys'][0]);
    }

    public function testHasTable()
    {
        $this->assertTrue($this->metadata->hasTable('user'));
        $this->assertFalse($this->metadata->hasTable('user_not_exists_888'));
    }


    public function testInnoDbStat()
    {
        $adapter = $this->adapter;
        $this->metadata->clearCacheInformation();
        $sql = "show global variables like 'innodb_stats_on_metadata'";
        $results = $adapter->query($sql);
        $row = $results->offsetGet(0);
        $status = strtoupper($row['Value']);
        if ($status == 'OFF') {
            // Let's make it ON
            $adapter->query("set global innodb_stats_on_metadata='ON'");
            $results = $adapter->query($sql);
            //$row = $results->current();
            //var_dump($row);

            $this->metadata->getPrimaryKey('user');
            $adapter->query("set global innodb_stats_on_metadata='OFF'");
        }
    }


    public function testGetPrimaryKeyThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Schema\Exception\InvalidArgumentException');
        $primary = $this->metadata->getPrimaryKey(array('cool'));
    }


    public function testGetPrimaryKeysThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Schema\Exception\InvalidArgumentException');
        $primary = $this->metadata->getPrimaryKeys(array('cool'));
    }


    public function testGetPrimaryKeyThrowsNoPrimaryKeyException()
    {
        $this->setExpectedException('Soluble\Schema\Exception\NoPrimaryKeyException');
        $primary = $this->metadata->getPrimaryKey('test_table_without_pk');
    }

    public function testGetPrimaryKeys()
    {
        $keys = $this->metadata->getPrimaryKeys('user');
        $this->assertInternalType('array', $keys);
        $this->assertEquals('user_id', $keys[0]);
    }


    public function testGetPrimaryKeysThrowsNoPrimaryKeyException()
    {
        $this->setExpectedException('Soluble\Schema\Exception\NoPrimaryKeyException');
        $primary = $this->metadata->getPrimaryKeys('test_table_without_pk');
    }
}
